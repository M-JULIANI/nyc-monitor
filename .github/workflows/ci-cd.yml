name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  DOCKER_IMAGE_PREFIX: atlas
  VERSION: ${{ github.sha }}

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          make install
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_PREFIX: ${{ env.DOCKER_IMAGE_PREFIX }}
          VERSION: ${{ env.VERSION }}

      - name: Build
        run: |
          make build
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_PREFIX: ${{ env.DOCKER_IMAGE_PREFIX }}
          VERSION: ${{ env.VERSION }}

      - name: Run tests
        run: |
          make test
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

  build-and-push:
    #if: github.event_name == 'push' && github.ref == 'refs/heads/master'
   if: github.event_name == 'pull_request' #for testing purposes only
    # Only run on master push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Check if GOOGLE_APPLICATION_CREDENTIALS is set
        run: |
          if [ -z "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" ]; then
            echo "Secret is NOT set";
            exit 1;
          else
            echo "Secret is set";
          fi
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: List backend directory
        run: |
          echo "CHECKING HERE! Listing backend directory:"
          ls -l ./backend

      - name: List frontend directory
        run: |
          echo "CHECKING HERE! Listing frontend directory:"
          ls -l ./frontend

      - name: Test Dockerfile existence for buildx
        run: |
          if [ ! -f ./backend/Dockerfile ]; then
            echo "Dockerfile not found for buildx!";
            exit 1;
          else
            echo "Dockerfile found for buildx!";
            cat ./backend/Dockerfile | head -10
          fi

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ github.workspace }}/backend/Dockerfile
          push: true
          tags: us-central1-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/atlas-repo/atlas-backend:${{ env.VERSION }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ github.workspace }}/frontend/Dockerfile
          push: true
          tags: us-central1-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/atlas-repo/atlas-frontend:${{ env.VERSION }}

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create false

      - name: Print Google env vars
        run: env | grep GOOGLE || true

      - name: Check gcloud auth and project
        run: |
          gcloud auth list
          gcloud config list project

      - name: Deploy Backend API
        run: |
          make deploy-backend-api
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_PREFIX: ${{ env.DOCKER_IMAGE_PREFIX }}
          VERSION: ${{ env.VERSION }}
          STAGING_BUCKET: ${{ secrets.STAGING_BUCKET }}

      - name: Deploy Backend
        run: |
          make deploy-backend
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_PREFIX: ${{ env.DOCKER_IMAGE_PREFIX }}
          VERSION: ${{ env.VERSION }}
          STAGING_BUCKET: ${{ secrets.STAGING_BUCKET }}

      - name: Deploy Frontend
        run: |
          make deploy-frontend
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_PREFIX: ${{ env.DOCKER_IMAGE_PREFIX }}
          VERSION: ${{ env.VERSION }}
          STAGING_BUCKET: ${{ secrets.STAGING_BUCKET }}